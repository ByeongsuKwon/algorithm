#include <stdio.h>
#include <vector>

using namespace std;
int a[50], p[2001]= {1, 1};
vector<int> ans;

int odd(int x, int y){ if ( x&1 ) return x; if ( y&1 ) return y; }

int even(int x, int y){
	if (x&1 == 0 && y&1 == 0) return -1;
	if (x&1 && y&1 ) return -1;
	return odd(x, y);
}

struct Maximumflow{
	int n;
	vector<vecotr<int> > e;
	vector<int> odd, even;

	Maximumflow(int n): n(n){
		e.resize(n), chk.resize(n), pred.resize(n,-1);
		odd.resize(n), even.resize(n);
	};

	void add_edge(int u, int v){
		if ( p[u+v] ) return;

		if ( u&1 ) odd.push_back(u);
		else if ( u&1 == 0) even.push_back(u);
		if ( v&1 ) odd.push_back(v);
		else if ( v&1 == 0) even.push_back(v);

		e[u].push_back(v); e[v].push_back(u);
	}

	bool dfs(int now, int m1, int m2){
		if (now == - 1){

		}



	}

	void flow(int m1, int m2){
		int ans=0;
		if ( even (m1, m2 ) == -1) return;
		int o =even(m1, m2);

		for (int i=0; i<odd.size(); i++){

			fill(chk.begin(), chk.end(), 0);
			if ( dfs(i, m1, m2)) ans++;

		}

		if (ans == n/2-1)  ans.push_back(m2);
	}

};

int main(){

	for (int i=2; i<=2000; i++) {
		if ( !p[i] ){
			for (int j=i+i; j<=2000; j+=i){
				p[j]=1;
			}
		}
	}

	int n; scanf("%d", &n);
	for (int i=1; i<=n; i++) scanf("%d", &a[i]);
	Maximumflow mf(n+1);

	for (int i=1; i<=n; i++){
		for(int j=i+1; j<=n; j++){
			if ( even(a[i], a[j]) >=0 ) {
				mf.add_edge(a[i], a[j]);
			}
		}
	}

	for (int i=2; i<=n; i++) {
		mf.flow(a[0], a[i]);
	}

	if ( ans.size() == 0) return !printf("-1\n");

	for (int i=0; i<n; i++) printf("%d ", ans[i]);
	printf("\n");

}
